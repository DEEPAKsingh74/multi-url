document.addEventListener('DOMContentLoaded', function () { const urlsTextarea = document.getElementById('urls-textarea'); const openAllBtn = document.getElementById('open-all-btn'); const openAllSavedBtn = document.getElementById('open-all-saved'); const statusMessage = document.getElementById('status-message'); const savedUrlsList = document.getElementById('saved-urls-list'); const clearSavedBtn = document.getElementById('clear-saved-btn'); const tabButtons = document.querySelectorAll('.tab-btn'); const tabContents = document.querySelectorAll('.tab-content'); const donationBtn = document.getElementById('donation-btn'); const helpBtn = document.getElementById('help-btn'); donationBtn.addEventListener('click', () => { chrome.tabs.create({ url: chrome.runtime.getURL('donation.html') }); }); helpBtn.addEventListener('click', () => { chrome.tabs.create({ url: chrome.runtime.getURL('help.html') }); }); tabButtons.forEach(button => { button.addEventListener('click', () => { tabButtons.forEach(btn => btn.classList.remove('active')); tabContents.forEach(content => content.classList.remove('active')); button.classList.add('active'); const tabId = button.getAttribute('data-tab'); document.getElementById(`${tabId}-tab`).classList.add('active'); if (tabId === 'saved-urls') { loadSavedUrls(); } }); }); openAllBtn.addEventListener('click', () => openUrlsFromTextarea()); openAllSavedBtn.addEventListener('click', () => openSavedUrls()); clearSavedBtn.addEventListener('click', clearSavedUrls); function openUrls(urls, source) { if (!urls || urls.length === 0) { showStatus(`No valid URLs found in ${source}`, 'error'); return; } urls.forEach(url => { chrome.tabs.create({ url: url, active: false }); }); showStatus(`Opening ${urls.length} URLs from ${source}...`, 'success'); if (source === 'textarea') { setTimeout(() => { urlsTextarea.value = ''; showStatus('URLs opened successfully!', 'success'); }, 1000); } } function openUrlsFromTextarea() { const text = urlsTextarea.value.trim(); if (!text) { showStatus('Please enter at least one URL', 'error'); return; } const urls = extractUrls(text); openUrls(urls, 'textarea'); } function openSavedUrls() { chrome.storage.sync.get({ savedUrls: [] }, (data) => { if (data.savedUrls.length === 0) { showStatus('No saved URLs to open', 'error'); return; } openUrls(data.savedUrls, 'saved URLs'); }); } function extractUrls(text) { console.log("Text", text); const potentialUrls = text.split(/\s+/); const validUrls = []; potentialUrls.forEach(item => { let url = item.trim(); if (!url) return; if (!url.startsWith('http://') && !url.startsWith('https://')) { url = 'https://' + url; } try { new URL(url); validUrls.push(url); } catch (e) { } }); return validUrls; } function showStatus(message, type) { statusMessage.textContent = message; statusMessage.style.color = type === 'error' ? '#ff4444' : '#4285f4'; } function loadSavedUrls() { chrome.storage.sync.get({ savedUrls: [] }, (data) => { savedUrlsList.innerHTML = ''; if (data.savedUrls.length === 0) { savedUrlsList.innerHTML = '<p>No saved URLs yet. Right-click on a link or selected URL text and choose "Save selected URL" to add.</p>'; return; } data.savedUrls.forEach((url, index) => { const urlItem = document.createElement('div'); urlItem.className = 'saved-url-item'; const urlLink = document.createElement('a'); urlLink.className = 'saved-url'; urlLink.href = url; urlLink.textContent = url; urlLink.target = '_blank'; urlLink.addEventListener('click', (e) => { e.preventDefault(); chrome.tabs.create({ url: url, active: false }); }); const removeBtn = document.createElement('button'); removeBtn.className = 'remove-url-btn'; removeBtn.title = 'Remove URL'; removeBtn.innerHTML = ` <svg fill=none height=16 stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=2 viewBox="0 0 24 24"width=16 xmlns=http://www.w3.org/2000/svg><path d="M3 6h18"></path><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1=10 x2=10 y1=11 y2=17></line><line x1=14 x2=14 y1=11 y2=17></line></svg> `; removeBtn.addEventListener('click', (e) => { e.stopPropagation(); removeSavedUrl(index); }); urlItem.appendChild(urlLink); urlItem.appendChild(removeBtn); savedUrlsList.appendChild(urlItem); }); }); } function removeSavedUrl(index) { chrome.storage.sync.get({ savedUrls: [] }, (data) => { const updatedUrls = [...data.savedUrls]; updatedUrls.splice(index, 1); chrome.storage.sync.set({ savedUrls: updatedUrls }, loadSavedUrls); }); } function clearSavedUrls() { chrome.storage.sync.set({ savedUrls: [] }, loadSavedUrls); } });